1. Назначение отладчика VC++
2. Основные возможности отладчика VC++
3. Что такое точка останова?
4. Способы установки точек останова.
5. Какие способы запуска отладчика вы знаете?
6. Назовите основные возможности управления режимами отладки.
7. Какие способы для отображения значений переменных вы знаете?
8. Назначение отладочных окон Debuggerа.
9. Для каких целей используется окно памяти?
10.Для каких целей используется окно регистров?
11.Для каких целей используется окно дизассемблированного кода?
12.Что отражается в окне дизассемблированного кода?

1. Отладчик VC++ используется для обнаружения и исправления ошибок в программах, написанных на языке программирования C++.
2. Основные возможности отладчика VC++ включают установку точек останова, отображение значений переменных, управление режимами отладки, просмотр памяти и регистров процесса, а также анализ дизассемблированного кода.
3. Точка останова - это место в программе, в котором выполнение временно приостанавливается, чтобы разработчик мог изучить состояние программы в данной точке.
4. Точки останова можно установить через контекстное меню исходного кода, нажав на кнопку "Поставить точку останова" или через команды отладчика.
5. Отладчик VC++ может быть запущен как прямо из Visual Studio, так и внешне через командную строку или сценарий.
6. Основные возможности управления режимами отладки включают просмотр и изменение значений переменных, управление выполнением программы (продолжение, остановка, шаг пошагово), просмотр стека вызовов функций и т.д.
7.  Для отображения значений переменных можно использовать окно "Локальные переменные", "Области", "Память" и "Выражения".
8. Отладочные окна Debuggerа позволяют просматривать состояние программы во время выполнения, включая переменные, стек вызовов, регистры процессора и т.д.
9. Окно памяти используется для просмотра содержимого памяти, как данные, так и инструкции кода.
10. Окно регистров используется для отображения значений регистров процессора в момент выполнения программы.
11. Окно дизассемблированного кода показывает собранный код программы в виде машинных инструкций.
12. В окне дизассемблированного кода отображается текущая инструкция, указатель инструкции, комментарии и т.д.